#summary Dojo Object Store

= Introduction =

Separation of concerns is a fundamental aspect of good programming. Keeping presentation distinct from the data model is a key separation to employ. The Dojo object store architecture establishes a consistent interface for data interaction inspired by the HTML5 object store API.

The Dojo Object Store interface allows you to develop and use well-encapulsated components that can be easily connected to various data providers. Dojo Object Store is an API, and has multiple implementations called stores. Stores include a simple in-memory store, a JSON/REST store, legacy dojo.data stores, and store wrappers that provide additional functionality.

= Gettings Started =

The easiest store to get started is the [https://code.google.com/p/gwt-dojo-toolkit/source/browse/trunk/src/gwt/dojo/core/client/store/MemoryStore.java MemoryStore] (dojo/store/Memory). We can simply provide an array of objects to the constructor, and we can start interacting with it. Once the store is created, we can query it with the `query` method. An easy way to query is to provide an object with name/value pairs that indicate the required values of matched objects. The `query` method always returns an object or array with a `forEach` method (as well as `map` and `filter`):

{{{

import gwt.dojo.core.client.Dojo;
import gwt.dojo.core.client.DojoCallback;
import gwt.dojo.core.client.JsArray;
import gwt.dojo.core.client.JsObject;
import gwt.dojo.core.client.store.MemoryStore;
import gwt.dojo.core.client.store.api.Store.ForEachCallback;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.Window;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class Gwt_dojo_demo implements EntryPoint, DojoCallback {

	/**
	 * This is the entry point method.
	 */
	public void onModuleLoad() {
		JsArray modules = JsArray.create();
		modules.push(MemoryStore.MODULE);
		Dojo.require(modules, this);
	}

	@Override
	public void callback(JsArray arguments) {
		JsObject storeOptions = JsObject.create();
		storeOptions.put(MemoryStore.DATA, getEmployees());
		storeOptions.put(MemoryStore.IDPROPERTY, "name");

		MemoryStore employeeStore = MemoryStore.create(storeOptions);

		JsObject query = JsObject.create("department", "sales");
		employeeStore.query(query).setForEachCallback(new ForEachCallback() {
			@Override
			public void forEach(JsObject item) {
				Window.alert(item.getString("name"));
			}
		});
	}

	private native JsArray getEmployees() /*-{
		return [
            {name:"Jim", department:"accounting"},
            {name:"Bill", department:"engineering"},
            {name:"Mike", department:"sales"},
            {name:"John", department:"sales"}
        ];
	}-*/;
}
}}}

This will call an alert with the name of employee in the sales department.